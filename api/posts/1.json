{"total":4,"pageSize":10,"pageCount":1,"data":[{"title":"archlinux下微信安装问题，以com.qq.weixin.spark为例","slug":"archlinux-wechat-problem","date":"2021-11-19T15:25:35.000Z","updated":"2021-11-19T15:54:24.480Z","comments":true,"path":"api/articles/archlinux-wechat-problem.json","excerpt":"","keywords":null,"cover":"../static/images/archlinux1.png","content":"<p>今天下午打开微信发现突然用不了了，出现了<code>WeChatWin.dll</code>缺失错误，错误代码:126，刚开始是以为自己误删除了哪个文件导致的，于是删除微信重装，但发现问题还在，上<code>Archlinux WiKi</code>找了一下发现了问题所在，在此记录一下解决方案：</p>\n<ol>\n<li>由于archlinux滚动更新的特点，突然想起早上执行了<code>sudo pacman -Syyu</code>进行了升级，这一升级导致了微信所依赖的库<code>lib32-libldap</code>升级为2.6.0从而产生了不兼容，因此我们需要进行版本回退。</li>\n<li>执行<code>sudo pacman -S downgrade</code>或者<code>yay -S downgrade</code>，安装<code>downgrade</code>工具</li>\n<li>执行<code>sudo downgrade lib32-libldap</code>进行回退，如下图，选择需要回退的版本号，我这儿选择的是版本号为2.4.58进行回退，然后重新启动微信就行啦~</li>\n</ol>\n<p><img src=\"../static/images/archlinux1.png\" alt=\"\"></p>\n<p>由于arch滚动发行的特点，所以要养成记录一些可能存在的依赖不兼容的习惯哦~</p>\n<h4 id=\"那么，如何避免已损坏的软件包并使-Arch-Linux-更加稳定？\"><a href=\"#那么，如何避免已损坏的软件包并使-Arch-Linux-更加稳定？\" class=\"headerlink\" title=\"那么，如何避免已损坏的软件包并使 Arch Linux 更加稳定？\"></a>那么，如何避免已损坏的软件包并使 Arch Linux 更加稳定？</h4><p>在更新Arch Linux之前查看<a href=\"https://www.archlinux.org/news/\">Arch Linux新闻</a>和<a href=\"https://bbs.archlinux.org/\">论坛</a>，看看是否有任何已报告的问题。过去几周我一直在使用 Arch Linux 作为我的主要操作系统，以下是我在这段时间内发现的一些简单提示，以避免在 Arch Linux 中安装不稳定的软件包。</p>\n<ol>\n<li>避免部分升级。这意味着永远不要运行 <code>pacman -Sy &lt;软件包名称&gt;</code>。此命令将在安装软件包时部分升级你的系统。相反，优先使用 <code>pacman -Syu</code> 来更新系统，然后使用 <code>package -S &lt;软件包名称&gt;</code> 安装软件包。</li>\n<li>避免使用 <code>pacman -Syu -force</code> 命令。<code>-force</code> 标志将忽略程序包和文件冲突，并且可能会以破损的程序包或损坏的系统结束。</li>\n<li>不要跳过依赖性检查。这意味着不要使用 <code>pacman -Rdd &lt;软件包名称&gt;</code>。此命令将在删除软件包时避免依赖性检查。如果你运行这个命令，另一个重要的包所需的关键依赖也可以被删除。最终，它会损坏你的 Arch Linux。</li>\n<li>定期备份重要数据和配置文件以避免数据丢失总是一个好习惯。</li>\n<li>安装第三方软件包和 AUR 等非官方软件包时要小心。不要安装那些正在经历重大发展的软件包。</li>\n</ol>\n","text":"今天下午打开微信发现突然用不了了，出现了WeChatWin.dll缺失错误，错误代码:126，刚开始是以为自己误删除了哪个文件导致的，于是删除微信重装，但发现问题还在，上Archlinux WiKi找了一下发现了问题所在，在此记录一下解决方案：由于archlinux滚动更新的特点","link":"","raw":null,"photos":[],"categories":[{"name":"软件安装","slug":"软件安装","count":1,"path":"api/categories/软件安装.json"}],"tags":[{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"},{"name":"arch","slug":"arch","count":1,"path":"api/tags/arch.json"}]},{"title":"Off-line recognition of realistic Chinese handwriting using segmentation-free strategy","slug":"Off-line-recognition-of-realistic-Chinese-handwriting-using-segmentation-free-strategy","date":"2021-09-28T02:37:03.000Z","updated":"2021-09-28T03:31:32.132Z","comments":true,"path":"api/articles/Off-line-recognition-of-realistic-Chinese-handwriting-using-segmentation-free-strategy.json","excerpt":"<center><font size=4px>pattern recognition</font></center>\n\n<h4 id=\"Off-line-recognition-of-realistic-Chinese-handwriting-using-segmentation-free-strategy\"><a href=\"#Off-line-recognition-of-realistic-Chinese-handwriting-using-segmentation-free-strategy\" class=\"headerlink\" title=\"Off-line recognition of realistic Chinese handwriting using segmentation-free strategy\"></a>Off-line recognition of realistic Chinese handwriting using segmentation-free strategy</h4><center>Tong-Hua Su∗, Tian-Wen Zhang, De-Jun Guan, Hu-Jie Huang</center>\n\n<p><strong>Keywords:</strong> Optical character recognition(光学字符识别) Chinese handwriting recognition(中文手写字识别) Sliding window(滑动窗口) Hidden Markov Model(隐马尔可夫模型) Segmentation-free strategy(无分割策略) Classifier combination(分类器组合)</p>","keywords":null,"cover":"../static/images/model-Backbone.png","content":null,"text":"pattern recognitionOff-line recognition of realistic Chinese handwriting using segmentation-free strategyTong-Hua Su∗, Tian-Wen Zhang, De-Ju","link":"","raw":null,"photos":[],"categories":[{"name":"论文阅读","slug":"论文阅读","count":1,"path":"api/categories/论文阅读.json"}],"tags":[{"name":"手写字识别","slug":"手写字识别","count":1,"path":"api/tags/手写字识别.json"},{"name":"中文","slug":"中文","count":1,"path":"api/tags/中文.json"}]},{"title":"Windows下多版本python的并存问题","slug":"Windows下多版本python的并存问题","date":"2021-06-03T13:41:55.000Z","updated":"2021-10-02T02:34:41.324Z","comments":true,"path":"api/articles/Windows下多版本python的并存问题.json","excerpt":"<h3 id=\"Windows下并存多版本python的解决方案（以python3-6和python3-8并存为例）\"><a href=\"#Windows下并存多版本python的解决方案（以python3-6和python3-8并存为例）\" class=\"headerlink\" title=\"Windows下并存多版本python的解决方案（以python3.6和python3.8并存为例）\"></a>Windows下并存多版本python的解决方案（以python3.6和python3.8并存为例）</h3>","keywords":null,"cover":"../static/images/pythonVersion.png","content":null,"text":"Windows下并存多版本python的解决方案（以python3.6和python3.8并存为例）答主因为涉及需要安装tensorflow2.0以前的版本，python3.8不支持，所以不得不安装一个python3.6,具体解决方案如下：首先我们本地已经安装了python3.8","link":"","raw":null,"photos":[],"categories":[{"name":"python","slug":"python","count":1,"path":"api/categories/python.json"}],"tags":[{"name":"依赖","slug":"依赖","count":1,"path":"api/tags/依赖.json"}]},{"title":"git学习笔记","slug":"gitLearning","date":"2021-05-06T09:49:10.000Z","updated":"2021-09-28T02:56:26.615Z","comments":true,"path":"api/articles/gitLearning.json","excerpt":"<ol>\n<li><p><strong>git 基本上传文件操作步骤</strong>  </p>","keywords":null,"cover":"../static/images/gitReset.png","content":null,"text":"git 基本上传文件操作步骤  创建需要上传的文件，然后执行以下操作  git initgit add &lt;file&gt;   git commit -m &lt;message&gt;(&quot;this is the description of this commi","link":"","raw":null,"photos":[],"categories":[{"name":"git","slug":"git","count":1,"path":"api/categories/git.json"}],"tags":[{"name":"分布式","slug":"分布式","count":1,"path":"api/tags/分布式.json"},{"name":"版本控制","slug":"版本控制","count":1,"path":"api/tags/版本控制.json"}]}]}