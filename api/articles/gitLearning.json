{"title":"git学习笔记","slug":"gitLearning","date":"2021-05-06T09:49:10.000Z","updated":"2021-05-06T12:48:04.208Z","comments":true,"path":"api/articles/gitLearning.json","photos":[],"link":"","excerpt":null,"covers":["../static/images/gitReset.png","../static/images/gitVersionCode.png","../static/images/workArea.jpg","../static/images/workArea2.jpg","../static/images/branchMerge.png","../static/images/branchMerge2.png","../static/images/branchMerge3.jpg"],"content":"<ol>\n<li><p><strong>git 基本上传文件操作步骤</strong>  </p>\n<ul>\n<li><p>创建需要上传的文件，然后执行以下操作  </p>\n</li>\n<li><p><code>git init</code></p>\n</li>\n<li><p><code>git add &lt;file&gt;</code>   </p>\n</li>\n<li><p><code>git commit -m &lt;message&gt;(&quot;this is the description of this commit&quot;)</code>  </p>\n</li>\n</ul>\n</li>\n<li><p><strong>git 版本回退</strong></p>\n<ul>\n<li>我们可以使用 <code>git log --pretty=oneline</code> 查看该git库提交历史。</li>\n<li><code>git reset --hard head~n</code> 用来执行回退操作，n代表回退的步长</li>\n</ul>\n<p> <img src=\"../static/images/gitReset.png\" alt=\"回退示意图1\"><br> <img src=\"../static/images/gitReset2.png\" alt=\"回退示意图2\"></p>\n<ul>\n<li>使用 <code>git reflog</code> 来查看该git库的提交命令历史，通过确定<code>commit_id</code>来确认需要回退的版本id</li>\n</ul>\n<p> <img src=\"../static/images/gitVersionCode.png\" alt=\"快进指令图\">  </p>\n<ul>\n<li><p>因为有head指针，所以回退速度很快；对于已经上传到远程库的如果想做改动如(A-&gt;B-&gt;C，现在想回到B，那么只能做一个B的快照变为A-&gt;B-&gt;C-&gt;B，不能直接到B然后强行删除C<code>git push -f</code>(除非是个人项目))，只能在本地先做改动之后再执行如下命令。</p>\n</li>\n<li><p><code>git pull</code></p>\n</li>\n<li><p><code>git push</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>工作区和暂存区</strong>  </p>\n<p> <img src=\"../static/images/workArea.jpg\" alt=\"工作区和版本库\"></p>\n<ul>\n<li>工作区就是电脑本地能看到的目录,包括隐藏目录<code>.git</code>，暂存区是暂时存放的已修改文件。</li>\n<li><code>git add</code> 实际上就是将文件修改添加到暂存区;<code>git commit</code>就是将暂存区的所有内容提交到当前分支。</li>\n<li>利用 <code>git status</code> 查看现有的文件是否被修改或是新创建的文件。</li>\n</ul>\n<p> <img src=\"../static/images/workArea2.jpg\" alt=\"工作区和版本库2\">  </p>\n<ul>\n<li><code>git diff</code> 比较工作区(work dict)和暂存区(stage)区域快照之间的差异，只显示已修改但尚未暂存的改动，即执行<code>git add</code>后该差异就会消失。</li>\n<li><code>git diff --cached</code>是暂存区(stage)和分支(branch)的比较。</li>\n</ul>\n</li>\n<li><p><strong>管理修改和撤销修改</strong></p>\n<ul>\n<li><p>Git跟踪管理的是文件修改，而非文件本身。</p>\n</li>\n<li><p>若只修改了文件内容而未执行<code>git add</code>命令，那么执行<code>git commit -m &lt;message&gt;</code>时并不会提交修改，因为没有执行<code>git add</code>的内容不会上传到暂存区，而只有上传到暂存区的内容才会被提交。对于多个需要上传的内容可以先全部执行<code>git add</code>后再执行<code>git commit -m  &lt;message&gt; 进行一次性上传</code></p>\n</li>\n<li><p>未保存到暂存区的文件可以执行<code>git restore &lt;filename&gt;</code>来撤销修改。</p>\n</li>\n<li><p><code>git restore --worktree &lt;filename&gt;</code>从暂存区(stage)恢复到工作区(work dict)。</p>\n</li>\n<li><p><code>git restore --staged &lt;filename&gt;</code>从master恢复到暂存区。</p>\n</li>\n<li><p><code>git restore --soure=head --staged --worktree &lt;filename&gt;</code>从master恢复到暂存区和工作区。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>删除文件</strong></p>\n<ul>\n<li><p>对于已经提交到<code>branch</code>的文件，若只在工作区删除了文件可以通过4的命令来从暂存区或者branch恢复到工作区。</p>\n</li>\n<li><p>如果已经执行了<code>git rm &lt;filename&gt;</code>即在暂存区删除了该文件，那么可以通过执行<code>git reset --hard head~</code>来回退版本号。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>建立远程库</strong></p>\n<ul>\n<li><p>首先在<code>github</code>或者<code>gitte</code>上创建一个新的<code>repository</code>，然后通过<code>git remote origin git@github.com:xx/xx.git</code>与远程库建立联系，如果github库输入错误的话，需要执行<code>git remote rm origin</code>，然后再重新建立联系；可以使用<code>git remote -v</code>查看远程库信息。</p>\n</li>\n<li><p><code>git pull --rebase origin &lt;branch&gt;</code>，当本地库和远程库不一致时需要先执行<code>pull</code>命令将远程库不一致的内容拷贝到本地，使用<code>git branch</code>可以查看本地branch的名字。</p>\n</li>\n<li><p><code>git push -u origin &lt;branch&gt;</code>，将本地的<code>main</code>分支的内容上传到远程库<code>master</code>分支，参数<code>-u</code>能使两者关联起来以简化以后的命令。</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p><strong>ssh-key的创建</strong></p>\n<ul>\n<li><p>在<code>git-bash</code>中执行<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>，然后执行<code>cat ~/.ssh/id_rsa.pub</code>，复制内容粘贴,然后打开<code>github/settings/SSH and GPG keys</code>新建一个<code>ssh</code>并粘贴。</p>\n</li>\n<li><p>使用<code>ssh -T git@github.com</code>进行测试。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>远程库克隆</strong></p>\n<ul>\n<li><code>git clone git@github.com:xxxx/xxx.git</code>，git支持多种协议，其中<code>ssh</code>协议的速度最快，<code>https</code>协议速度最慢。</li>\n</ul>\n</li>\n<li><p><strong>创建与合并分支</strong></p>\n<ul>\n<li><p><code>git branch &lt;branchname&gt;</code>，创建新的分支。</p>\n</li>\n<li><p><code>git checkout/switch &lt;branchname&gt;</code>，切换到新分支，使用<code>switch</code>操作更容易让人理解。</p>\n</li>\n<li><p><code>git switch -c &lt;branch&gt;|git checkout -b &lt;branchname&gt;</code>，创建并切换新分支。</p>\n</li>\n<li><p><code>git merge &lt;designated branchname&gt;</code>，我们在某个分支下进行的修改在另一个分支下是不可见的，可以通过<code>merger</code>操作来实现分支合并，最后删除我们创建的分支。</p>\n</li>\n<li><p><code>git branch -d &lt;branchname&gt;</code>，删除分支。</p>\n</li>\n<li><p>尽量使用创建新的分支来完成工作任务，最终再进行合并并删除分支，这与直接在<code>maste</code>分支上完成是一样的效果，但过程更安全。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>解决冲突</strong></p>\n<ul>\n<li>当两个分支同时对一个文件进行更新时，若更新内容不一致，则在进行<code>merger</code>操作时就会出现冲突，可以利用指令<code>git log --pretty=oneline</code>查看操作历史，利用<code>git log --graph --pretty=online --abbrev-commit</code>查看分支合并图，分支图谱从上到下的时间线是从新到旧。</li>\n</ul>\n</li>\n<li><p><strong>分支管理策略</strong></p>\n<ul>\n<li><code>git</code>的<code>Fast forword</code>模式，我们称这个模式为“快进模式”，直接将<code>master</code>指向<code>dev</code>的当前提交，这种合并方式在删除分支后会丢失分支信息；所以我们会用<code>--no-ff</code>模式来合并分支</li>\n</ul>\n<p><img src=\"../static/images/branchMerge.png\" alt=\"分支合并\"></p>\n<ul>\n<li><code>master</code>分支应该十分稳定，即仅用来发布新版本而不在上面干活，干活都在<code>dev</code>分支上干活</li>\n</ul>\n<p><img src=\"../static/images/branchMerge2.png\" alt=\"分支合并2\"></p>\n<ul>\n<li>在利用<code>git</code>进行工作时实际上应该先执行<code>pull</code>拉取服务器上的内容然后再此基础上提交自己的更新再上传到服务器。</li>\n</ul>\n</li>\n<li><p><strong>Bug 分支</strong></p>\n<ul>\n<li><p>当我们在做自己的开发时，突然接到需求要修复一个<code>bug</code>，此时我们需要利用<code>git stash</code>来保存当前的工作现场。可以利用<code>git stash list</code>查看保存的现场，<code>git stash apply</code>恢复，恢复后，<code>stash</code>的内容并不会被删除，需要利用<code>git stash drop</code>来删除；上面的两个命令可以用<code>git stash pop</code>替代，即在恢复后删除<code>stash</code>的内容。</p>\n</li>\n<li><p>如果<code>stash</code>中有多个记录 那么可以在恢复时指定<code>git stash apply stash@&#123;n&#125;</code>。</p>\n</li>\n<li><p>我们知道此时的<code>dev</code>分支上也应该有该<code>bug</code>，我们查看刚刚提交<code>bug</code>的<code>commit_id</code>，然后执行<code>git cherry-pick commit_id</code>来修复分支<code>dev</code>的<code>bug</code>，而不是再切换到<code>dev</code>分支做重复劳动。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>feature 分支</strong></p>\n<ul>\n<li><code>git branch -D &lt;branchname&gt;</code>强行删除一个分支。</li>\n</ul>\n</li>\n<li><p><strong>多人协作</strong></p>\n<p><img src=\"../static/images/branchMerge3.jpg\"></p>\n<ul>\n<li><p>远程仓库的默认名是<code>origin</code>，查看远程库信息<code>git remote -v</code>。</p>\n</li>\n<li><p>推送分支<code>git push origin master</code>，将本地master分支上的所有内容推送到远程库。</p>\n</li>\n<li><p><code>git checkout -b dev origin/dev</code>，创建远程库的dev分支到本地。</p>\n</li>\n<li><p>当多人对origin/dev做了修改后，在进行push操作之前要先将代码pull到本地再进行合并然后提交。</p>\n</li>\n<li><p><code>git branch --set-upstream-to=origin/dev dev</code>，将本地<code>dev</code>与远程<code>origin/dev</code>进行连接。</p>\n</li>\n<li><p>1.首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p>\n</li>\n<li><p>2.如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p>\n</li>\n<li><p>3.如果合并有冲突，则解决冲突，并在本地提交；</p>\n</li>\n<li><p>4.没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p>\n</li>\n<li><p>5.如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Rebase</strong></p>\n<ul>\n<li><p><code>git rebase</code>。</p>\n</li>\n<li><p>可以把本地未<code>push</code>分叉提交历史整理成直线。</p>\n</li>\n<li><p>rebase的目的是使我们在查看历史提交变化时容易，因为分叉的提交需要三方对比(本地、远程、别人)。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>标签管理</strong></p>\n<ul>\n<li><p><code>git tag &lt;tag-name&gt;</code>可以打新标签，默认是打在最新提交的<code>commit</code>上的，如果需要之前的打标签可以通过<code>git log</code>查看其<code>commit_id</code>，然后执行<code>git tag &lt;tag-name&gt; commit_id</code>。</p>\n</li>\n<li><p><code>git tag</code>查看所有标签，<code>git show &lt;tag-name&gt;</code>查看标签详细信息。</p>\n</li>\n<li><p><code>git tag -a &lt;tag-name&gt; -m &lt;message&gt;</code>，创建带说明的标签。</p>\n</li>\n<li><p><code>git tag -d &lt;tag-name&gt;</code>，删除标签。</p>\n</li>\n<li><p><code>git push origin &lt;tag-name&gt;</code>，将标签推送到远程库。</p>\n</li>\n<li><p><code>git push origin --tags</code>，一次性推送尚未推送到远程的所有标签。</p>\n</li>\n<li><p><code>git push oritin:refs/tags/&lt;tag-name&gt;</code>，删除推送到远程库的<code>tag</code>。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>自定义git</strong></p>\n<ul>\n<li><p>创建一个<code>.gitignore</code>文件，将要忽略的文件名填进去，<code>git</code>就会自动忽略这些文件。</p>\n</li>\n<li><p>忽略操作系统自动生成的文件，如缩略图。</p>\n</li>\n<li><p>忽略编译生成的中间文件，可执行文件等，也就是如果一个文件是由另一个文件生成的，那么久没必要放进版本库，如java编程生成的<code>.class</code>文件。</p>\n</li>\n<li><p>忽略你自己的带有敏感信息的配置文件，如存放口令的配置文件。</p>\n</li>\n<li><p><code>git check-ignore -v &lt;file-name&gt;</code>，查询是否该文件是否被加入了<code>.gitignore</code>中</p>\n</li>\n<li><p><code>.*</code>在<code>.gitignore</code>中时可能会导致文件本身被忽略而不能被添加到版本库，此时可以在<code>.gitignore</code>中添加<code>!.gitignore</code>。</p>\n</li>\n<li><p>自定义别名，<code>git config --global alias.&lt;new name&gt; &lt;default name&gt;</code></p>\n</li>\n<li><p><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code>.</p>\n</li>\n<li><p><code>--global</code>参数对当前用户起作用，不加参数默认对当前仓库起作用，每个仓库的配置文件位置<code>.git/config</code>，而当前用户的Git配置文件在<code>.gitconfig</code>中。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>搭建Git服务器</strong></p>\n<ul>\n<li><p><code>sudo apt-get install git</code>，在<code>linux</code>上安装<code>git    </code>。</p>\n</li>\n<li><p><code>sudo adduser git</code>，创建一个<code>git</code>用户。</p>\n</li>\n<li><p>创建证书登录，收集所有开发者的<code>id_rsa.pub</code>文件，导入<code>/home/git/authorized_keys</code>文件中(人数少的话可以这么操作，人多可以利用<a href=\"https://github.com/res0nat0r/gitosis\">Gitosis</a>来进行管理)</p>\n</li>\n<li><p><code>sudo git init --base &lt;repositary-name&gt;</code>，创建仓库。</p>\n</li>\n<li><p><code>sudo chown -R git:git &lt;repositary-name&gt;</code>，修改仓库用户权限。</p>\n</li>\n<li><p>禁用<code>shell</code>等登录，通过编辑`/etc/passwd。</p>\n</li>\n<li><p><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code>改为<code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code>；这样能保证用户可以通过<code>ssh</code>使用<code>git</code>但无法登录<code>shell</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>Git图形化界面</strong></p>\n<ul>\n<li>SourceTree</li>\n</ul>\n</li>\n</ol>\n","categories":[{"name":"git","slug":"git","count":1,"path":"api/categories/git.json"}],"tags":[{"name":"分布式","slug":"分布式","count":1,"path":"api/tags/分布式.json"},{"name":"版本控制","slug":"版本控制","count":1,"path":"api/tags/版本控制.json"}]}